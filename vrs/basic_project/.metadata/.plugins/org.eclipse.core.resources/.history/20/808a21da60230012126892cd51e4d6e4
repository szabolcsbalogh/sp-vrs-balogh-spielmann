/**
*****************************************************************************
**
**  File        : main.c
**
**  Abstract    : main function.
**
**  Functions   : main
**
**  Environment : Atollic TrueSTUDIO/STM32
**                STMicroelectronics STM32Lxx Standard Peripherals Library
**
**  Distribution: The file is distributed “as is,” without any warranty
**                of any kind.
**
**  (c)Copyright Atollic AB.
**  You may use this file as-is or modify it according to the needs of your
**  project. Distribution of this file (unmodified or modified) is not
**  permitted. Atollic AB permit registered Atollic TrueSTUDIO(R) users the
**  rights to distribute the assembled, compiled & linked contents of this
**  file as part of an application binary file, provided that it is built
**  using the Atollic TrueSTUDIO(R) toolchain.
**
**
*****************************************************************************
*/
/* Includes */
#include <stddef.h>
#include <stdio.h>
#include "mcu.h"
#include "usart.h"
#include "adc.h"
#include "timer.h"
#include "ads1100.h"
#include "i2c.h"
#include "spi.h"
#include "mcp6s92.h"


/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/

int tick = 0;
uint8_t gain=0;


//this is a function handling received data
//it is not called automaticaly
void handleReceivedChar(unsigned char data)
{
	char s[128];
	if (data >= 'A' && data <= 'Z') {
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART1(s);
	}
	if (data >= 'a' && data <= 'z') {
		data += 'A'-'a';
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART1(s);
	}

	//if (data == 'A')
	//{
	//	PutsUART1("Prijal som znak A");
	//}
	//else
	if (data == 'T' || data == 't')
	{
		char buf[20];
		sprintf(buf, "t=%d\n",tick);
		PutsUART1(buf);
	}
}

void handleReceivedChar2(unsigned char data)
{
	char s[128];
	if (data >= 'A' && data <= 'Z') {
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART2(s);
	}
	if (data >= 'a' && data <= 'z') {
		data += 'A'-'a';
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART2(s);
	}

	//if (data == 'A')
	//{
	//	PutsUART1("Prijal som znak A");
	//}
	//else
	if (data == 'T' || data == 't')
	{
		char buf[20];
		sprintf(buf, "t=%d\n",tick);
		PutsUART2(buf);
	}
}

void handleReceivedChar3(unsigned char data)
{
	char s[128];
	if (data >= 'A' && data <= 'Z') {
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART3(s);
	}
	if (data >= 'a' && data <= 'z') {
		data += 'A'-'a';
		sprintf(s, "Prijal som znak %c\n",data);
		PutsUART3(s);
	}

	//if (data == 'A')
	//{
	//	PutsUART1("Prijal som znak A");
	//}
	//else
	if (data == 'T' || data == 't')
	{
		char buf[20];
		sprintf(buf, "t=%d\n",tick);
		PutsUART3(buf);
	}
}


void timerInt(void)
{
	int conversion=0;
	char s[1024];
	const uint8_t gain_type[] = {1,2,4,5,8,10,16,32};
	float u;

	conversion = ADC_GetConversionValue(ADC1);

			u = (conversion*3.3)/(4095 * gain_type[gain]);
	    	sprintf(s,"U= %f G= %u\n",u,gain_type[gain]);


	    	PutsUART2(s);

}



int main(void)
{
	//unsigned int data;
	double preasure;
	char s[1024];
	int conversion=0;


	/**
	 * Zapojenie
	 * UART1
	 * fialova	pa10	rx
	 * hneda	pa9		tx
	 *
	 * UART2
	 * fialova	pa3		rx
	 * hneda	pa2		tx
	 *
	 * UART3
	 * fialova	pc11	rx
	 * hneda	pc10	tx
	 */

	//initUSART1();	//configures all necessary to use USART1
	initUSART2();
	//initUSART3();
	initADC();
	initBaseTimer();

	registerBaseTimerHandler((void*)&timerInt);
	//initPWM_Output_PC7();
	//TIM3->CCR1 = 0;


	//initI2C1();
	initSPI2();
	initCS_Pin();

	mcp6s92_setings(CMD_MCP6S92_WRITE_TO_REG, MCP6S92_CHANNEL_REG_ADDRESS, CHANNEL_0);
	mcp6s92_setings(CMD_MCP6S92_WRITE_TO_REG, MCP6S92_GAIN_REG_ADDRESS, GAIN_1);


	//RegisterCallbackUART1(&handleReceivedChar);	//register function to be called when interrupt occurs
	//RegisterCallbackUART2(&handleReceivedChar2);
	//RegisterCallbackUART3(&handleReceivedChar3);
	//PutsUART1("Running USART1...\n");			//write something to usart to see some effect



    while(1)
    {
    	conversion = ADC_GetConversionValue(ADC1);
    	if ((conversion < 2000) && (gain<7))
    			{
    				gain++;
    				mcp6s92_setings(CMD_MCP6S92_WRITE_TO_REG, MCP6S92_GAIN_REG_ADDRESS, gain);
    			}

    	if ((conversion > 3500) && (gain>0))
    	    	{
    	    		gain--;
    	    		mcp6s92_setings(CMD_MCP6S92_WRITE_TO_REG, MCP6S92_GAIN_REG_ADDRESS, gain);
    	    	}


    	//readDataADS1100(&data);

    	//preasure = data / 16384.0;

    	//preasure /= 8e-3;

    	//sprintf(s,"%u\n",conversion);

    	//PutsUART2(s);

    	tick++;






    	//PutsUART1("Running USART1...\n");
    	//PutsUART2("Running USART2...\n");
    	//PutsUART3("Running USART3...\n");
    }

	return 0;
}

